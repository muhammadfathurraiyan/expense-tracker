import type { Metadata } from "next";
import { Bricolage_Grotesque } from "next/font/google";
import "../globals.css";
import { dir } from "i18next";
import { languages } from "../i18n/settings";
import { cn } from "@/lib/utils";
import { ThemeProvider } from "@/components/global/theme-provider";
import Header from "@/components/global/Header";
import Footer from "@/components/global/Footer";
import { useTranslation } from "../i18n";

const bricolageGrotesque = Bricolage_Grotesque({
  subsets: ["latin"],
  variable: "--font-sans",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export async function generateStaticParams() {
  return languages.map((lng) => ({ lng }));
}

export default async function RootLayout({
  children,
  params: { lng },
}: Readonly<{
  children: React.ReactNode;
  params: { lng: string };
}>) {
  const { t } = await useTranslation(lng);
  return (
    <html lang={lng} dir={dir(lng)} suppressHydrationWarning>
      <body
        className={cn(
          "min-h-screen bg-background text- font-sans antialiased",
          bricolageGrotesque.variable
        )}
      >
        <ThemeProvider
          attribute="class"
          defaultTheme="system"
          enableSystem
          // disableTransitionOnChange
        >
          <Header
            content={{
              nav: {
                home: t("header.nav.home"),
                features: t("header.nav.features"),
                about: t("header.nav.about"),
                contact: t("header.nav.contact"),
              },
              nav2: {
                home: t("header.nav2.home"),
                overview: t("header.nav2.overview"),
                analytics: t("header.nav2.analytics"),
                settings: t("header.nav2.settings"),
              },
              profile: {
                settings: t("profile.settings"),
                profile: t("profile.profile"),
              },
              mode: {
                light: t("mode.light"),
                dark: t("mode.dark"),
                system: t("mode.system"),
                label: t("mode.label"),
              },
              lang: {
                eng: t("lang.eng"),
                ind: t("lang.ind"),
                label: t("lang.label"),
              },
            }}
          />
          {children}
          <Footer
            content={{ title: t("footer.title"), footer: t("footer.footer") }}
          />
        </ThemeProvider>
      </body>
    </html>
  );
}
